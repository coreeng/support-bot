# Do not modify this file

MAKEFLAGS += --warn-undefined-variables

P2P_TENANT_NAME ?= support-bot
P2P_APP_NAME ?= support-bot
P2P_VERSION ?= $(shell git rev-parse --short HEAD)
P2P_IMAGE_NAMES ?= $(P2P_APP_NAME)

P2P_REGISTRY ?= local
P2P_REGISTRY_FAST_FEEDBACK ?= local/fast-feedback
P2P_REGISTRY_EXTENDED_TEST ?= local/extended-test
P2P_REGISTRY_PROD ?= local/prod

.PHONY: p2p-help
p2p-help:
	@echo "Usage:"
	@grep -E '^[a-zA-Z1-9_-]+:.*?## .*$$' -h $(MAKEFILE_LIST) | grep '^p2p-' | awk 'BEGIN {FS = ":.*?## "}; {printf "  make %-30s %s\n", $$1, $$2}'

%: p2p_tenant_name = $(P2P_TENANT_NAME)
%: p2p_app_name = $(P2P_APP_NAME)
%: p2p_version = $(P2P_VERSION)

.PHONY: p2p-build
p2p-build: lint build-app ## Build the app
%-app: p2p_registry=$(P2P_REGISTRY_FAST_FEEDBACK)
%-app: p2p_image_tag=$(P2P_REGISTRY_FAST_FEEDBACK)/$(if $(1),$(1),$(P2P_APP_NAME)):$(P2P_VERSION)

.PHONY: p2p-functional
p2p-functional: build-functional deploy-functional test-functional ## Run functional tests
%-functional: p2p_app_url_suffix=-$(P2P_TENANT_NAME)-functional
%-functional: p2p_namespace=$(P2P_NAMESPACE_FUNCTIONAL)
%-functional: p2p_registry=$(P2P_REGISTRY_FAST_FEEDBACK)
%-functional: p2p_image_tag=$(P2P_REGISTRY_FAST_FEEDBACK)/$(if $(1),$(1),$(P2P_APP_NAME))-functional:$(P2P_VERSION)

.PHONY: p2p-nft
p2p-nft: build-nft deploy-nft test-nft ## Run NFT tests
%-nft: p2p_app_url_suffix=-$(P2P_TENANT_NAME)-nft
%-nft: p2p_namespace=$(P2P_NAMESPACE_NFT)
%-nft: p2p_registry=$(P2P_REGISTRY_FAST_FEEDBACK)
%-nft: p2p_image_tag=$(P2P_REGISTRY_FAST_FEEDBACK)/$(if $(1),$(1),$(P2P_APP_NAME))-nft:$(P2P_VERSION)

.PHONY: p2p-integration
p2p-integration: build-integration deploy-integration test-integration ## Run integration tests
%-integration: p2p_app_url_suffix=-$(P2P_TENANT_NAME)-integration
%-integration: p2p_namespace=$(P2P_NAMESPACE_INTEGRATION)
%-integration: p2p_registry=$(P2P_REGISTRY_FAST_FEEDBACK)
%-integration: p2p_image_tag=$(P2P_REGISTRY_FAST_FEEDBACK)/$(if $(1),$(1),$(P2P_APP_NAME))-integration:$(P2P_VERSION)

.PHONY: p2p-extended-test
p2p-extended-test: build-extended-test deploy-extended-test test-extended-test ## Run extended tests
%-extended-test: p2p_app_url_suffix=-$(P2P_TENANT_NAME)-extended
%-extended-test: p2p_namespace=$(P2P_NAMESPACE_EXTENDED)
%-extended-test: p2p_registry=$(P2P_REGISTRY_EXTENDED_TEST)
%-extended-test: p2p_image_tag=$(P2P_REGISTRY_EXTENDED_TEST)/$(if $(1),$(1),$(P2P_APP_NAME))-extended:$(P2P_VERSION)

.PHONY: p2p-prod
p2p-prod: deploy-prod ## Deploy to production
%-prod: p2p_app_url_suffix=
%-prod: p2p_namespace=$(P2P_NAMESPACE_PROD)
%-prod: p2p_registry=$(P2P_REGISTRY_PROD)

.PHONY: p2p-promote-to-extended-test
p2p-promote-to-extended-test:
	$(foreach image, $(P2P_IMAGE_NAMES), \
		corectl p2p promote "$(image):$(P2P_VERSION)" \
			--source-stage "$(P2P_REGISTRY_FAST_FEEDBACK_PATH)" \
			--dest-registry "$(P2P_REGISTRY)" \
			--dest-stage "$(P2P_REGISTRY_EXTENDED_TEST_PATH)" \
	;)

.PHONY: p2p-promote-to-prod
p2p-promote-to-prod:
	$(foreach image, $(P2P_IMAGE_NAMES), \
		corectl p2p promote "$(image):$(P2P_VERSION)" \
			--source-stage "$(P2P_REGISTRY_EXTENDED_TEST_PATH)" \
			--dest-registry "$(P2P_REGISTRY)" \
			--dest-stage "$(P2P_REGISTRY_PROD_PATH)" \
	;)
