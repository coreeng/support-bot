apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("org.slf4j:slf4j-api:2.0.+")
    testRuntimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl:2.25.+")
    testRuntimeOnly("org.apache.logging.log4j:log4j-core:2.25.+")
    
    testCompileOnly("org.projectlombok:lombok:1.18.+")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.+")
    
    testImplementation("org.apache.commons:commons-text:1.13.1")

    testImplementation(platform('org.junit:junit-bom:5.13.+'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.13.+')
    testImplementation("org.junit.platform:junit-platform-launcher:1.13.+")
    testImplementation("org.awaitility:awaitility:4.3.+")
    testImplementation("org.assertj:assertj-core:3.27.+")
    testImplementation("org.wiremock:wiremock:3.13.+")

    // Avoiding vulnerability reports from wiremock
    testImplementation("org.eclipse.jetty:jetty-server:11.0.+")

    testImplementation("com.fasterxml.jackson.datatype:jackson-datatype-guava")
    testImplementation('io.rest-assured:rest-assured:5.5.+')

    // Avoiding vulnerability reports from rest-assured
    testImplementation("org.apache.commons:commons-lang3:3.18.+")
    testImplementation("commons-codec:commons-codec:1.18.+")

    testImplementation("net.javacrumbs.json-unit:json-unit-assertj:4.1.+")
    testImplementation("net.datafaker:datafaker:2.4.3")
}

// Test will be called from make target stubbed-functional
// You can also run it manually if you have the app started
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standard_out", "standard_error"
        showStandardStreams = true
    }
    systemProperty 'serviceEndpoint', System.getenv("SERVICE_ENDPOINT") ? System.getenv("SERVICE_ENDPOINT")  : "http://localhost:8080"

    // Print test summary details
    afterSuite { desc, result ->
        if (!desc.parent) {
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }

    outputs.upToDateWhen { System.getProperty("rerun") == null }
}

import java.util.concurrent.TimeUnit

def serviceProcess
def serviceAlreadyRunning = false
tasks.register('testIntegrated') {
    dependsOn ':service:bootJar'
    finalizedBy 'test'
    finalizedBy 'stopService'
    doFirst {
        def healthUrl = new URI("http://localhost:8081/health").toURL()
        boolean up = false
        logger.lifecycle("Checking for running service at ${healthUrl}")

        // Quick probe: if service is already running, skip startup
        try {
            def conn = (HttpURLConnection) healthUrl.openConnection()
            conn.connectTimeout = 1000
            conn.readTimeout = 1000
            conn.requestMethod = "GET"
            if (conn.responseCode == 200) {
                serviceAlreadyRunning = true
                up = true
                logger.lifecycle("Detected running service at ${healthUrl}; skipping startup")
            }
        } catch (Throwable ignored) {
            logger.lifecycle("No running service detected at ${healthUrl}; starting service")
        }

        def logfilePath = "${project(":service").projectDir.path}/logs/support-bot.log"
        if (!up) {
            def bootJarTask = project(':service').tasks.named('bootJar').get()
            def jarFile = bootJarTask.archiveFile.get().asFile

            logger.lifecycle("Starting service: ${jarFile}")
            serviceProcess = new ProcessBuilder(
                    "${System.properties['java.home']}/bin/java",
                    "-jar", jarFile.absolutePath,
                    "--spring.profiles.active=functionaltests"
            )
                    .redirectErrorStream(true)
                    .redirectOutput(new File(logfilePath))
                    .start()

            def deadline = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(10)

            while (System.currentTimeMillis() < deadline) {
                try {
                    def conn = (HttpURLConnection) healthUrl.openConnection()
                    conn.connectTimeout = 1000
                    conn.readTimeout = 1000
                    conn.requestMethod = "GET"
                    if (conn.responseCode == 200) {
                        up = true
                        break
                    }
                } catch (Throwable ignored) {}
                if (!serviceProcess.isAlive()) {
                    throw new GradleException("Service terminated early. See ${project.layout.buildDirectory}")
                }
                Thread.sleep(1000)
            }
        }

        if (!up) {
            throw new GradleException("Service not healthy at http://localhost:8081/health within timeout. See ${logfilePath}")
        }
        logger.lifecycle("Service is up; running functional tests...")
    }
}

tasks.register('stopService') {
    doLast {
        if (!serviceAlreadyRunning && serviceProcess != null && serviceProcess.isAlive()) {
            logger.lifecycle("Stopping service...")
            serviceProcess.destroy()
            if (!serviceProcess.waitFor(10, TimeUnit.SECONDS)) {
                serviceProcess.destroyForcibly()
            }
        }
    }
}