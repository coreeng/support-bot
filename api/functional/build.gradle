apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("org.slf4j:slf4j-api:2.0.+")
    testRuntimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl:2.25.+")
    testRuntimeOnly("org.apache.logging.log4j:log4j-core:2.25.+")
    
    testCompileOnly("org.projectlombok:lombok:1.18.+")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.+")
    
    testImplementation("org.apache.commons:commons-text:1.13.1")

    testImplementation(platform('org.junit:junit-bom:5.13.+'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.13.+')
    testImplementation("org.junit.platform:junit-platform-launcher:1.13.+")
    testImplementation("org.awaitility:awaitility:4.3.+")
    testImplementation("org.assertj:assertj-core:3.27.+")
    testImplementation("org.wiremock:wiremock:3.13.+")

    // Avoiding vulnerability reports from wiremock
    testImplementation("org.eclipse.jetty:jetty-server:11.0.+")

    testImplementation('io.rest-assured:rest-assured:5.5.+')

    // Avoiding vulnerability reports from rest-assured
    testImplementation("org.apache.commons:commons-lang3:3.18.+")
    testImplementation("commons-codec:commons-codec:1.18.+")

    testImplementation('org.skyscreamer:jsonassert:1.5.+')
    testImplementation("net.datafaker:datafaker:2.4.3")
}

// Test will be called from make target stubbed-functional
// You can also run it manually if you have the app started
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standard_out", "standard_error"
        showStandardStreams = true
    }
    systemProperty 'serviceEndpoint', System.getenv("SERVICE_ENDPOINT") ? System.getenv("SERVICE_ENDPOINT")  : "http://localhost:8080"

    // Print test summary details
    afterSuite { desc, result ->
        if (!desc.parent) {
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}
