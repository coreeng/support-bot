name: Trivy Security & License Scan

on:
  pull_request:
  push:

concurrency:
  group: security-scan-${{ github.head_ref }}
  cancel-in-progress: true

env:
  TRIVY_CACHE_DIR: /tmp/trivy-cache

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      actions: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ${{ env.TRIVY_CACHE_DIR }}
          key: trivy-db-${{ runner.os }}-${{ hashFiles('**/build.gradle', '**/build.gradle.kts') }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Run Vulnerability/Secret/Config Scan
        uses: aquasecurity/trivy-action@0.28.0
        continue-on-error: true
        with:
          scan-type: fs
          scan-ref: '.'
          output: trivy-results.json
          format: json
          scanners: vuln,config,secret
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          cache-dir: ${{ env.TRIVY_CACHE_DIR }}

      - name: Run License Scan
        uses: aquasecurity/trivy-action@0.28.0
        continue-on-error: true
        with:
          scan-type: fs
          scan-ref: '.'
          output: trivy-license-results.json
          format: json
          scanners: license
          cache-dir: ${{ env.TRIVY_CACHE_DIR }}

      - name: Summarize Scan Results
        run: |
          echo "# Complete Repository Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          summarize_trivy() {
            local file=$1
            local type=$2
            if [ -f "$file" ]; then
              TOTAL=$(jq '[.Results[] | (.Vulnerabilities // []) + (.Misconfigurations // []) + (.Secrets // []) + (.Licenses // [])] | length' "$file" || echo 0)
              CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' "$file" || echo 0)
              HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' "$file" || echo 0)
              MED=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' "$file" || echo 0)
              LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' "$file" || echo 0)
              MIS=$(jq '[.Results[]?.Misconfigurations[]?] | length' "$file" || echo 0)
              SECRETS=$(jq '[.Results[]?.Secrets[]?] | length' "$file" || echo 0)
              LICENSES=$(jq '[.Results[]?.Licenses[]?] | length' "$file" || echo 0)

              echo "### $type Scan" >> $GITHUB_STEP_SUMMARY
              echo "| Type | Severity | Count |" >> $GITHUB_STEP_SUMMARY
              echo "|------|----------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| Vulnerabilities | Critical | $CRIT |" >> $GITHUB_STEP_SUMMARY
              echo "| Vulnerabilities | High | $HIGH |" >> $GITHUB_STEP_SUMMARY
              echo "| Vulnerabilities | Medium | $MED |" >> $GITHUB_STEP_SUMMARY
              echo "| Vulnerabilities | Low | $LOW |" >> $GITHUB_STEP_SUMMARY
              echo "| Misconfigurations | - | $MIS |" >> $GITHUB_STEP_SUMMARY
              echo "| Secrets | - | $SECRETS |" >> $GITHUB_STEP_SUMMARY
              echo "| Licenses | - | $LICENSES |" >> $GITHUB_STEP_SUMMARY
              echo "| **Total Issues** | - | **$TOTAL** |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            else
              echo "**$type scan file not found.**" >> $GITHUB_STEP_SUMMARY
            fi
          }

          summarize_trivy trivy-results.json "Vulnerability/Secret/Config"
          summarize_trivy trivy-license-results.json "License"

      - name: Comment on PR with findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const files = [
              { path: 'trivy-results.json', type: 'Vulnerability/Secret/Config' },
              { path: 'trivy-license-results.json', type: 'License' }
            ];

            let comment = '# Complete Repository Security Scan Report\n\n';
            const now = new Date();
            comment += `**Date:** ${now.toISOString().split('T')[0]}\n`;
            comment += `**Branch:** ${context.payload.pull_request.head.ref}\n\n`;

            for (const f of files) {
              if (!fs.existsSync(f.path)) {
                comment += `**${f.type} scan results not found.**\n\n`;
                continue;
              }

              const data = JSON.parse(fs.readFileSync(f.path, 'utf8'));
              let total = 0, vulns = 0, misconfigs = 0, secrets = 0, licenses = 0;

              for (const r of data.Results || []) {
                vulns += (r.Vulnerabilities?.length || 0);
                misconfigs += (r.Misconfigurations?.length || 0);
                secrets += (r.Secrets?.length || 0);
                licenses += (r.Licenses?.length || 0);
              }
              total = vulns + misconfigs + secrets + licenses;

              comment += `### ${f.type} Scan\n`;
              comment += '| Category | Count |\n|----------|-------|\n';
              comment += `| Vulnerabilities | ${vulns} |\n`;
              comment += `| Misconfigurations | ${misconfigs} |\n`;
              comment += `| Secrets | ${secrets} |\n`;
              comment += `| Licenses | ${licenses} |\n`;
              comment += `| **Total Issues** | **${total}** |\n\n`;
            }

            if (files.every(f => !fs.existsSync(f.path))) {
              comment += '⚠️ No scan results found.\n';
            }

            comment += '\n---\n_Scan by [Trivy](https://github.com/aquasecurity/trivy)_';

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existing = comments.find(c => c.body.startsWith('# Complete Repository Security Scan Report'));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
